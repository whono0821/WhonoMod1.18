buildscript {
    ext.kotlin_version = '1.6.10'
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains:annotations:23.0.0'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'

version = '1.0'
group = 'whono.whonomod'
archivesBaseName = "whonomod"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.18.2'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', "whonomod", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            include '**/**'
            srcDirs += 'src/datagen/generated/resources'
            exclude '.cache'
        }
    }
    datagen {
        java.srcDirs = ['src/datagen/main/java']
        kotlin.srcDirs = ['src/datagen/main/kotlin']
        kotlin {
            compileClasspath += project.sourceSets.main.output
        }
        resources.srcDirs = ['src/datagen/main/resources']
    }
}

repositories {
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.0.32'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains:annotations:23.0.0'
}

jar {
    manifest{
        attributes([
                "Specification-Title"     : "Whono Mod",
                "Specification-Vendor"    : "Whono Mod are us",
                "Specification-Version"   : "mod_version",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Whono Mod are us",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

def kotlinCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn", "-Xjvm-default=all", "-Xno-call-assertions", "-Xno-param-assertions", "-Xuse-fast-jar-file-system"]

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += kotlinCompilerArgs
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += kotlinCompilerArgs
    }
}